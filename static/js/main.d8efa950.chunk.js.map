{"version":3,"sources":["component/main.js","App.js","serviceWorker.js","index.js"],"names":["MAIN","props","selected_id","state","isLoading","variable","vars","window","location","search","substring","split","i","length","pair","this","getQueryVariable","setState","fetch","process","then","response","json","data","id","className","article","questions","options","model","map","key","index","style","color","answer","human","React","Component","App","random","bind","Math","floor","href","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oNAsFeA,G,uDAjFX,WAAYC,GAAQ,IAAD,0BAERC,GADP,cAAMD,IACqBA,MAApBC,YAFQ,OAGf,EAAKC,MAAQ,CACTD,YAAYA,EACZE,WAAW,GALA,E,6DASFC,GAGb,IAFA,IACIC,EADQC,OAAOC,SAASC,OAAOC,UAAU,GAC5BC,MAAM,KACdC,EAAI,EAAGA,EAAIN,EAAKO,OAAQD,IAAK,CAClC,IAAIE,EAAOR,EAAKM,GAAGD,MAAM,KACzB,GAAIG,EAAK,KAAOT,EACZ,OAAOS,EAAK,GAGpB,OAAQ,I,0CAGS,IAAD,QACoB,IAAhCC,KAAKC,iBAAiB,OACtBD,KAAKE,SAAS,CAACf,YAAYa,KAAKC,iBAAiB,QACrDD,KAAKE,SAAS,CAACb,WAAW,IAC1Bc,MAAMC,4BAA2CJ,KAAKZ,MAAMD,YAAc,SACrEkB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAI,EAAKN,SAAS,CAACM,KAAMA,EAAMnB,WAAW,S,+BAGlD,IAAD,OAEL,OAAIW,KAAKZ,MAAMC,UACJ,0CAGP,yBAAKoB,GAAG,QACJ,6BAASC,UAAU,QACf,gCACI,yBAAKA,UAAU,SACX,mCAASV,KAAKZ,MAAMD,eAK5B,yBAAKuB,UAAU,cACX,6BACI,uCACA,2BAAIV,KAAKZ,MAAMoB,KAAKG,QAApB,MAEJ,6BACI,wCACA,4BAAKX,KAAKZ,MAAMoB,KAAKI,WACrB,qDACA,4BACKZ,KAAKZ,MAAMoB,KAAKK,QAAQC,MAAMC,KAAI,SAACC,EAAKC,GAAN,OAC/B,wBAAID,IAAKA,EAAMC,EACXC,MAAO,CAACC,MAAOF,IAAU,EAAK7B,MAAMoB,KAAKY,OAAON,MAAQ,UAAY,UACnEE,OAIb,6BACA,qDACA,4BACKhB,KAAKZ,MAAMoB,KAAKK,QAAQQ,MAAMN,KAAI,SAACC,EAAKC,GAAN,OAC/B,wBAAID,IAAKA,EAAMC,EACXC,MAAO,CAACC,MAAOF,IAAU,EAAK7B,MAAMoB,KAAKY,OAAOC,MAAQ,UAAY,UACnEL,e,GAtEtBM,IAAMC,YCiCVC,E,kDA9BX,WAAYtC,GAAQ,IAAD,8BACf,cAAMA,IACDE,MAAQ,CACTD,YAAa,EAAKsC,UAEtB,EAAKA,OAAS,EAAKA,OAAOC,KAAZ,gBALC,E,qDASf,OAAOC,KAAKC,MAAsB,KAAhBD,KAAKF,UAAmB,I,+BAI1C,OACI,yBAAKf,UAAU,OACX,4BAAQA,UAAU,cACd,yBAAKD,GAAG,WACJ,4BAAQA,GAAG,UACP,4BACI,uBAAGoB,KAAK,cAAR,mCAGR,kBAAC,EAAD,CAAM1C,YAAaa,KAAKZ,MAAMD,qB,GAxBpCmC,IAAMC,WCQJO,QACW,cAA7BtC,OAAOC,SAASsC,UAEe,UAA7BvC,OAAOC,SAASsC,UAEhBvC,OAAOC,SAASsC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnC,MAAK,SAAAoC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.d8efa950.chunk.js","sourcesContent":["import React from 'react';\nimport '../App.css';\n\nclass MAIN extends React.Component {\n\n    constructor(props) {\n        super(props);\n        const {selected_id} = this.props\n        this.state = {\n            selected_id:selected_id,\n            isLoading: true\n        }\n    }\n\n    getQueryVariable(variable) {\n        var query = window.location.search.substring(1);\n        var vars = query.split(\"&\");\n        for (var i = 0; i < vars.length; i++) {\n            var pair = vars[i].split(\"=\");\n            if (pair[0] === variable) {\n                return pair[1];\n            }\n        }\n        return (false);\n    }\n\n    componentDidMount() {\n        if (this.getQueryVariable('id') !== false)\n            this.setState({selected_id:this.getQueryVariable('id')})\n        this.setState({isLoading: true});\n        fetch(process.env.PUBLIC_URL + '/distractors/' + this.state.selected_id + '.json')\n            .then(response => response.json())\n            .then(data => this.setState({data: data, isLoading: false}))\n    }\n\n    render() {\n\n        if (this.state.isLoading) {\n            return <p>Loading ...</p>;\n        }\n        return (\n            <div id=\"main\">\n                <article className=\"post\">\n                    <header>\n                        <div className=\"title\">\n                            <h2>ID: {this.state.selected_id}</h2>\n                        </div>\n\n                    </header>\n\n                    <div className=\"mini-posts\">\n                        <div>\n                            <h2>Context</h2>\n                            <p>{this.state.data.article} </p>\n                        </div>\n                        <div>\n                            <h2>Question</h2>\n                            <h3>{this.state.data.questions}</h3>\n                            <h2>Model generate result</h2>\n                            <ul>\n                                {this.state.data.options.model.map((key, index) => (\n                                    <li key={key + index}\n                                        style={{color: index === this.state.data.answer.model ? \"crimson\" : \"black\"}}>\n                                        {key}\n                                    </li>\n                                ))}\n                            </ul>\n                            <br/>\n                            <h2>Human generate result</h2>\n                            <ul>\n                                {this.state.data.options.human.map((key, index) => (\n                                    <li key={key + index}\n                                        style={{color: index === this.state.data.answer.human ? \"crimson\" : \"black\"}}>\n                                        {key}\n                                    </li>\n                                ))}\n                            </ul>\n                        </div>\n                    </div>\n\n                </article>\n            </div>\n        );\n    }\n}\n\nexport default MAIN;\n","import React from 'react';\nimport './App.css';\nimport MAIN from \"./component/main\";\n\nclass App extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            selected_id: this.random()\n        }\n        this.random = this.random.bind(this)\n    }\n\n    random() {\n        return Math.floor(Math.random() * 5792) + 1 //5792 is total num of data\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <div id=\"wrapper\">\n                        <header id=\"header\">\n                            <h1>\n                                <a href=\"index.html\">Distractor Generator Showcase</a>\n                            </h1>\n                        </header>\n                        <MAIN selected_id={this.state.selected_id}/>\n                    </div>\n                </header>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}